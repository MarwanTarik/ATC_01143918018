name: Event Management WebApp CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
    AZURE_WEBAPP_NAME: 'EventManagement'
    AZURE_WEBAPP_PACKAGE_PATH: './publish'
    AZURE_WEBAPP_PUBLISH_PROFILE: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
    DOTNET_VERSION: '9.x'
    SOLUTION_FILE: 'EventManagement.Server/EventManagement.Server.sln'
    API_PROJECT_FILE: 'EventManagement.Server/EventManagement.Server.csproj'
    PUBLISH_DIR: 'publish'
    AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
    AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
    AUTH0_ROLE_CLAIM: ${{ secrets.AUTH0_ROLE_CLAIM }}
    CONNECTION_STRING: ${{ secrets.CONNECTION_STRING }}
    ASPNETCORE_ENVIRONMENT: 'Production' 

jobs:
    build-and-test:
        name: Build and Test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up .NET
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Restore dependencies
              run: dotnet restore ${{ env.SOLUTION_FILE }}

            - name: Build solution
              run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore

            - name: Publish API
              run: dotnet publish ${{ env.API_PROJECT_FILE }} --configuration Release --no-restore --no-build --output ${{ env.PUBLISH_DIR }}
            
            - name: List publish directory contents
              run: ls -la ${{ env.PUBLISH_DIR }}
            
            - name: Publish Artifacts
              uses: actions/upload-artifact@v4
              with:
                name: ${{env.AZURE_WEBAPP_NAME}}
                path: ${{ env.PUBLISH_DIR }}/**
            
    deploy:
        name: Deploy to Azure
        runs-on: ubuntu-latest
        needs: [build-and-test]
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'

        steps:
            - name: Download Artifacts
              uses: actions/download-artifact@v4
              with:
                name: ${{env.AZURE_WEBAPP_NAME}}
                path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
            
            - name: List downloaded artifacts
              run: ls -la ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
            
            - name: Deploy to Azure
              uses: azure/webapps-deploy@v2
              with:
                app-name: ${{ env.AZURE_WEBAPP_NAME }}
                publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
                package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
            
            - name: Configure App Settings
              uses: azure/appservice-settings@v1
              with:
                app-name: ${{ env.AZURE_WEBAPP_NAME }}
                app-settings-json: |
                        {
                            "Auth:Domain": "${{env.AUTH0_DOMAIN}}",
                            "Auth:Audience": "${{env.AUTH0_AUDIENCE}}",
                            "Application:Auth0RoleClaim": "${{env.AUTH0_ROLE_CLAIM}}",
                            "DB:ConnectionString": "${{env.CONNECTION_STRING}}"
                        }
                mask-inputs: true
    
    migrate-database:
        name: Run Database Migrations
        runs-on: ubuntu-latest
        needs: [deploy]
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up .NET
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Install EF Tools
              run: dotnet tool install --global dotnet-ef

            - name: Update Database
              run: dotnet ef database update --project EventManagement.Server/EventManagement.Server.csproj --connection "${{ env.CONNECTION_STRING }}"
              env:
                ASPNETCORE_ENVIRONMENT: Production
                CONNECTION_STRING: ${{ env.CONNECTION_STRING }}